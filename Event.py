class Event:
	"""this is a superclass for any events that might be generated by an
	object and sent to the EventManager"""

	def __init__(self):
		self.name = 'Generic Event'


class QuitEvent(Event):
	def __init__(self):
		super().__init__()
		self.name = 'Quit Event'


class TickEvent(Event):
	def __init__(self):
		super().__init__()
		self.name = 'Tick Event'


class LeftClicPressedEvent(Event):
	def __init__(self):
		super().__init__()
		self.name = 'Left Clic Event'


class RightClicPressedEvent(Event):
	def __init__(self):
		super().__init__()
		self.name = 'Right Clic Event'


class ChangeModeEvent(Event):
	def __init__(self, mode):
		super().__init__()
		self.name = 'Change Mode Event'
		self.mode = mode


class ToggleDebugEvent(Event):
	def __init__(self):
		super().__init__()
		self.name = 'Toggle Debug Event'


class MapUpdatedEvent(Event):
	def __init__(self, map_):
		super().__init__()
		self.name = 'Map Updated Event'
		self.map = map_


class EventManager:
	"""this object is responsible for coordinating most communication
	between the Model, View, and Controller."""

	def __init__(self):
		from weakref import WeakKeyDictionary
		self.listeners = WeakKeyDictionary()
		self.eventQueue = []

	def register_listener(self, listener):
		self.listeners[listener] = 1

	def unregister_listener(self, listener):
		if listener in self.listeners.keys():
			del self.listeners[listener]

	def post(self, event):
		if not isinstance(event, TickEvent):
			if isinstance(event, ChangeModeEvent):
				print('     Message: ' + event.name + ' (' + str(event.mode) + ')')
			else:
				print('     Message: ' + event.name)
		for listener in self.listeners.keys():
			# NOTE: If the weakref has died, it will be
			# automatically removed, so we don't have
			# to worry about it.
			listener.notify(event)
